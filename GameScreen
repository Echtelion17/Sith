public class JediRises extends Game {

	public SpriteBatch batch;
	Texture background;
	Texture falcon;
	Texture destroyer1;
	Texture destroyer2;
	Texture destroyer3;
	float falconX = 0;
	float falconY = 0;
	int gameState = 0;
	float velocity = 1;
	float gravity = 0.5f;
	float enemyVelocity = 10;
	Random random;
	int score = 0;
	int scoredEnemy = 0;
	BitmapFont font;
	BitmapFont font1;

	Circle falconCircle;

	ShapeRenderer shapeRenderer;

	int numberOfEnemies = 4;
	float [] enemyX = new float[numberOfEnemies];
	float [] enemyOffSet = new float[numberOfEnemies];
	float [] enemyOffSet2 = new float[numberOfEnemies];
	float [] enemyOffSet3 = new float[numberOfEnemies];
	float distance = 0;

	Circle[] enemyCircles;
	Circle[] enemyCircles2;
	Circle[] enemyCircles3;

	@Override
	public void create () {

		batch = new SpriteBatch();
		background = new Texture("background.png");
		falcon = new Texture("deathstar.png");
		destroyer1 = new Texture("destroyer.png");
		destroyer2 = new Texture("destroyer.png");
		destroyer3 = new Texture("destroyer.png");

		distance = Gdx.graphics.getWidth() / 2;
		random = new Random();

		falconX = Gdx.graphics.getWidth() / 5;
		falconY = Gdx.graphics.getHeight() / 3;

		shapeRenderer = new ShapeRenderer();

		falconCircle = new Circle();
		enemyCircles = new Circle[numberOfEnemies];
		enemyCircles2 = new Circle[numberOfEnemies];
		enemyCircles3 = new Circle[numberOfEnemies];

		font = new BitmapFont();
		font.setColor(Color.WHITE);
		font.getData().setScale(4);

		font1 = new BitmapFont();
		font1.setColor(Color.WHITE);
		font1.getData().setScale(6);

		for ( int i = 0; i<numberOfEnemies; i++) {

			enemyOffSet[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 400);
			enemyOffSet2[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 400);
			enemyOffSet3[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 400);

			enemyX[i] = Gdx.graphics.getWidth() - destroyer1.getWidth() / 2 + i * distance;

			enemyCircles[i] = new Circle();
			enemyCircles2[i] = new Circle();
			enemyCircles3[i] = new Circle();


		}

	}


	@Override
	public void render () {

		batch.begin();
		batch.draw((background),0,0,Gdx.graphics.getWidth(),Gdx.graphics.getHeight());

		if (gameState == 1) {

			if (enemyX[scoredEnemy] < Gdx.graphics.getWidth() / 2 - falcon.getHeight() / 3) {

				score++;

				if (scoredEnemy < numberOfEnemies - 1) {

					scoredEnemy++;

				}else {

					scoredEnemy = 0;

				}


			}

			if (Gdx.input.justTouched()) {

				velocity = -7;

			}

			for (int i = 0; i < numberOfEnemies; i++) {

				if (enemyX[i] < Gdx.graphics.getWidth() / 15) {

					enemyX[i] = enemyX[i] + (numberOfEnemies * distance);

					enemyOffSet[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 400);
					enemyOffSet2[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 400);
					enemyOffSet3[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 400);

				}else {

					enemyX[i] = enemyX[i] - enemyVelocity;

				}

				batch.draw(destroyer1,enemyX[i],Gdx.graphics.getHeight()/2 + enemyOffSet[i],Gdx.graphics.getWidth() / 8, Gdx.graphics.getHeight() / 4);
				batch.draw(destroyer2,enemyX[i],Gdx.graphics.getHeight()/2 + enemyOffSet2[i],Gdx.graphics.getWidth() / 8, Gdx.graphics.getHeight() / 4);
				batch.draw(destroyer3,enemyX[i],Gdx.graphics.getHeight()/2 + enemyOffSet3[i],Gdx.graphics.getWidth() / 8, Gdx.graphics.getHeight() / 4);

				enemyCircles[i] = new Circle(enemyX[i] + Gdx.graphics.getWidth() / 28, Gdx.graphics.getHeight() / 2 + enemyOffSet[i] + Gdx.graphics.getHeight() / 8 ,Gdx.graphics.getWidth() / 35);
				enemyCircles2[i] = new Circle(enemyX[i] + Gdx.graphics.getWidth() / 28, Gdx.graphics.getHeight() / 2 + enemyOffSet2[i] + Gdx.graphics.getHeight() / 8 ,Gdx.graphics.getWidth() / 35);
				enemyCircles3[i] = new Circle(enemyX[i] + Gdx.graphics.getWidth() / 28, Gdx.graphics.getHeight() / 2 + enemyOffSet3[i] + Gdx.graphics.getHeight() / 8, Gdx.graphics.getWidth() / 35);

			}

			if (falconY > 0 && falconY <= 1100) {

				velocity = velocity + gravity;
				falconY = falconY - velocity;

			}else {

				gameState = 2;

			}

		} else if (gameState == 0) {

			if (Gdx.input.justTouched()) {

				gameState = 1;

			}

		}else if ( gameState == 2) {

			font1.draw(batch,"Game Over! Tap To Play Again!" ,100 ,Gdx.graphics.getHeight() / 2 );

			if (Gdx.input.justTouched()) {

				gameState = 1;

				falconY = Gdx.graphics.getHeight() / 3;

				for (int i = 0; i < numberOfEnemies ; i++) {

					enemyOffSet[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 200);
					enemyOffSet2[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 200);
					enemyOffSet3[i] = (random.nextFloat() - 0.5f) * (Gdx.graphics.getHeight() - 200);

					enemyX[i] = Gdx.graphics.getWidth() - destroyer1.getWidth() / 2 + i * distance;

					enemyCircles[i] = new Circle();
					enemyCircles2[i] = new Circle();
					enemyCircles3[i] = new Circle();

				}

				velocity = 0;
				scoredEnemy = 0;
				score = 0;

			}

		}

		batch.draw(falcon,falconX ,falconY,Gdx.graphics.getWidth() / 10, Gdx.graphics.getHeight() / 6 );

		font.draw(batch,String.valueOf(score) ,100 ,200 );

		batch.end();

		falconCircle.set((falconX + Gdx.graphics.getWidth() / 30) + 29 , (falconY + Gdx.graphics.getHeight() / 20) + 35, ((Gdx.graphics.getWidth() / 28) * 17) / 12);

		//shapeRenderer.begin(ShapeRenderer.ShapeType.Filled);
		//shapeRenderer.setColor(Color.BLACK);
		//shapeRenderer.circle(falconCircle.x,falconCircle.y,falconCircle.radius);

		for ( int i = 0; i < numberOfEnemies; i++) {
			//shapeRenderer.circle(enemyX[i] + Gdx.graphics.getWidth() / 28, Gdx.graphics.getHeight() / 2 + enemyOffSet[i] + Gdx.graphics.getHeight() / 8 ,Gdx.graphics.getWidth() / 35);
			//shapeRenderer.circle(enemyX[i] + Gdx.graphics.getWidth() / 28, Gdx.graphics.getHeight() / 2 + enemyOffSet2[i] + Gdx.graphics.getHeight() / 8 ,Gdx.graphics.getWidth() / 35);
			//shapeRenderer.circle(enemyX[i] + Gdx.graphics.getWidth() / 28, Gdx.graphics.getHeight() / 2 + enemyOffSet3[i] + Gdx.graphics.getHeight() / 8 ,Gdx.graphics.getWidth() / 35);

			if (Intersector.overlaps(falconCircle, enemyCircles[i]) || Intersector.overlaps(falconCircle, enemyCircles2[i]) || Intersector.overlaps(falconCircle, enemyCircles3[i]) ) {

				gameState = 2;

			}
		}

		//shapeRenderer.end();
	}
	@Override
	public void dispose () {

	}

}
